name: Trigger and Monitor Test Suite

on: [push] # Or any other event that should trigger the workflow, e.g., workflow_dispatch

jobs:
  test_suite_integration:
    runs-on: ubuntu-latest
    env:
      NUMOS_API_BASE_URL: https://localhost:8000/api
      NUMOS_API_TOKEN: ${{ secrets.NUMOS_API_TOKEN || '' }}
      TEST_SUITE_ID: '12552c40-3903-4d41-b858-729867b81bef'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Trigger Test Suite Execution
        id: trigger_test_suite
        uses: actions/github-script@v7
        with:
          script: |
            const response = await fetch('${{ env.NUMOS_API_BASE_URL }}/test-suites/${{ env.TEST_SUITE_ID }}/execute-test-suite', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${{ env.NUMOS_API_TOKEN }}`
              },
              // You might need to send a request body depending on your API
              // body: JSON.stringify({ ... }),
            });

            if (!response.ok) {
              const error = await response.json();
              core.setFailed(`Failed to trigger test suite: ${response.status} - ${JSON.stringify(error)}`);
              return;
            }

            const data = await response.json();
            core.setOutput('test_execution_id', data.id);
            core.info(`Test suite execution initiated with ID: ${data.id}`);

      - name: Monitor Test Suite Execution
        id: monitor_test_suite
        uses: actions/github-script@v7
        with:
          script: |
            const testExecutionId = core.outputs.trigger_test_suite.test_execution_id;
            const baseUrl = '${{ env.NUMOS_API_BASE_URL }}';
            let testSuiteStatus = '';
            let allTestsCompleted = false;
            let allTestsPassed = true;
            const completedTestIds = new Set();
            let shouldBreak = false;

            const checkStatus = async () => {
              const response = await fetch(`${baseUrl}/${testExecutionId}/test-executions`, {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${{ env.NUMOS_API_TOKEN }}`
                },
              });

              if (!response.ok) {
                core.setFailed(`Failed to fetch test execution status: ${response.status}`);
                return false;
              }

              const data = await response.json();
              const { testSuiteExecution, testExecutions } = data;
              testSuiteStatus = testSuiteExecution.status;

              core.info(`Current Test Suite Status: ${testSuiteStatus}`);

              if (testSuiteStatus === 'failed') {
                core.setFailed(`Test Suite Execution Failed with status: ${testSuiteStatus}`);
                shouldBreak = true;
                return false;
              }

              if (testExecutions && testExecutions.length > 0) {
                allTestsPassed = true;
                let completedCount = 0;
                testExecutions.forEach(test => {
                  core.info(`  Test: ${test.testName} (${test.id}) - Status: ${test.status}`);
                  if (test.status === 'success' || test.status === 'failed' || test.status === 'canceled' || test.status === 'error') {
                    if (!completedTestIds.has(test.id)) {
                      completedTestIds.add(test.id);
                      completedCount++;
                    }
                  }
                  if (test.status === 'failed') {
                    allTestsPassed = false;
                    core.setFailed(`Test Execution Failed: ${test.testName} (${test.id}) - Status: ${test.status}`);
                    shouldBreak = true;
                  }
                });
                allTestsCompleted = completedCount === testExecutions.length;
              }
              return allTestsCompleted && testSuiteStatus === 'completed';
            };

            while (!allTestsCompleted && !shouldBreak) {
              const isComplete = await checkStatus();
              if (isComplete || shouldBreak) {
                break;
              }
              await new Promise(resolve => setTimeout(resolve, 5000));
            }

            if (testSuiteStatus === 'completed' && allTestsPassed) {
              core.info('Test suite execution completed successfully, and all tests passed!');
            } else if (!shouldBreak) {
              core.setFailed(`Test suite execution finished with status: ${testSuiteStatus}. All tests passed: ${allTestsPassed}`);
            }
            // No else here, we already set failure status in checkStatus
